// <auto-generated />
using Bank_DB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank_DB.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20201013070314_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank_DB.Models.Currency", b =>
                {
                    b.Property<int>("CurId")
                        .HasColumnName("CurID")
                        .HasColumnType("INT");

                    b.Property<int>("ExchangeRate")
                        .HasColumnType("INT");

                    b.Property<int>("Name")
                        .HasColumnType("INT");

                    b.HasKey("CurId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Bank_DB.Models.Depositors", b =>
                {
                    b.Property<int>("PassData")
                        .HasColumnType("INT");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("DepId")
                        .HasColumnName("DepID")
                        .HasColumnType("INT");

                    b.Property<int>("DepRafMark")
                        .HasColumnType("INT");

                    b.Property<long>("DeposDate")
                        .HasColumnType("DataTime");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("PhoneNum")
                        .HasColumnType("INT");

                    b.Property<long>("RefundDate")
                        .HasColumnType("DataTime");

                    b.Property<int>("SummAm")
                        .HasColumnType("INT");

                    b.Property<int>("SummRef")
                        .HasColumnType("INT");

                    b.HasKey("PassData");

                    b.HasIndex("DepId");

                    b.ToTable("Depositors");
                });

            modelBuilder.Entity("Bank_DB.Models.Deposits", b =>
                {
                    b.Property<int>("DepId")
                        .HasColumnName("DepID")
                        .HasColumnType("INT");

                    b.Property<int>("AddCond")
                        .HasColumnType("INT");

                    b.Property<int>("CurId")
                        .HasColumnName("CurID")
                        .HasColumnType("INT");

                    b.Property<string>("DepName")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("MinDepAmount")
                        .HasColumnType("INT");

                    b.Property<int>("MinDepTern")
                        .HasColumnType("INT");

                    b.HasKey("DepId");

                    b.HasIndex("CurId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Bank_DB.Models.Employee", b =>
                {
                    b.Property<int>("EmId")
                        .HasColumnName("EmID")
                        .HasColumnType("INT");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Age")
                        .HasColumnType("INT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("Full_Name")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("CHAR");

                    b.Property<int>("PassData")
                        .HasColumnType("INT");

                    b.Property<int>("PosId")
                        .HasColumnName("PosID")
                        .HasColumnType("INT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.HasKey("EmId");

                    b.HasIndex("PassData");

                    b.HasIndex("PosId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Bank_DB.Models.Positions", b =>
                {
                    b.Property<int>("PosId")
                        .HasColumnName("PosID")
                        .HasColumnType("INT");

                    b.Property<string>("PosName")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Requirements")
                        .HasColumnType("INT");

                    b.Property<int>("Responsibilities")
                        .HasColumnType("INT");

                    b.Property<int>("Salary")
                        .HasColumnType("INT");

                    b.HasKey("PosId");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("Bank_DB.Models.Depositors", b =>
                {
                    b.HasOne("Bank_DB.Models.Deposits", "Dep")
                        .WithMany("Depositors")
                        .HasForeignKey("DepId")
                        .IsRequired();
                });

            modelBuilder.Entity("Bank_DB.Models.Deposits", b =>
                {
                    b.HasOne("Bank_DB.Models.Currency", "Cur")
                        .WithMany("Deposits")
                        .HasForeignKey("CurId")
                        .IsRequired();
                });

            modelBuilder.Entity("Bank_DB.Models.Employee", b =>
                {
                    b.HasOne("Bank_DB.Models.Depositors", "PassDataNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("PassData")
                        .IsRequired();

                    b.HasOne("Bank_DB.Models.Positions", "Pos")
                        .WithMany("Employee")
                        .HasForeignKey("PosId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}